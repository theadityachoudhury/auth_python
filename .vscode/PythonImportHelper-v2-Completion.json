[
    {
        "label": "settings",
        "importPath": "app.config.settings",
        "description": "app.config.settings",
        "isExtraImport": true,
        "detail": "app.config.settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.config.settings",
        "description": "app.config.settings",
        "isExtraImport": true,
        "detail": "app.config.settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.config.settings",
        "description": "app.config.settings",
        "isExtraImport": true,
        "detail": "app.config.settings",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "asc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "DeclarativeMeta",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "DeclarativeMeta",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "StaticPool",
        "importPath": "sqlalchemy.pool",
        "description": "sqlalchemy.pool",
        "isExtraImport": true,
        "detail": "sqlalchemy.pool",
        "documentation": {}
    },
    {
        "label": "QueuePool",
        "importPath": "sqlalchemy.pool",
        "description": "sqlalchemy.pool",
        "isExtraImport": true,
        "detail": "sqlalchemy.pool",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "DisconnectionError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "user_service",
        "importPath": "app.services.UserService",
        "description": "app.services.UserService",
        "isExtraImport": true,
        "detail": "app.services.UserService",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "close_db",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "db_health_check",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "init_db",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "get_db_context",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "get_db_context",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "cleanup_pycache",
        "importPath": "app.utils.pycache_cleanup",
        "description": "app.utils.pycache_cleanup",
        "isExtraImport": true,
        "detail": "app.utils.pycache_cleanup",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "app.repositories.base_repository",
        "description": "app.repositories.base_repository",
        "isExtraImport": true,
        "detail": "app.repositories.base_repository",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.schemas.users",
        "description": "app.schemas.users",
        "isExtraImport": true,
        "detail": "app.schemas.users",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "app.schemas.users",
        "description": "app.schemas.users",
        "isExtraImport": true,
        "detail": "app.schemas.users",
        "documentation": {}
    },
    {
        "label": "user_controller",
        "importPath": "app.controllers.user_controller",
        "description": "app.controllers.user_controller",
        "isExtraImport": true,
        "detail": "app.controllers.user_controller",
        "documentation": {}
    },
    {
        "label": "UserValidators",
        "importPath": "app.schemas.validators",
        "description": "app.schemas.validators",
        "isExtraImport": true,
        "detail": "app.schemas.validators",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "user_repository",
        "importPath": "app.repositories.user_repository",
        "description": "app.repositories.user_repository",
        "isExtraImport": true,
        "detail": "app.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "ContextVar",
        "importPath": "contextvars",
        "description": "contextvars",
        "isExtraImport": true,
        "detail": "contextvars",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "BaseHTTPMiddleware",
        "importPath": "starlette.middleware.base",
        "description": "starlette.middleware.base",
        "isExtraImport": true,
        "detail": "starlette.middleware.base",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "startup_event",
        "importPath": "app.events.startup",
        "description": "app.events.startup",
        "isExtraImport": true,
        "detail": "app.events.startup",
        "documentation": {}
    },
    {
        "label": "shutdown_event",
        "importPath": "app.events.shutdown",
        "description": "app.events.shutdown",
        "isExtraImport": true,
        "detail": "app.events.shutdown",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "app.utils.logger.setup",
        "description": "app.utils.logger.setup",
        "isExtraImport": true,
        "detail": "app.utils.logger.setup",
        "documentation": {}
    },
    {
        "label": "add_logging_middleware",
        "importPath": "app.utils.logger.setup",
        "description": "app.utils.logger.setup",
        "isExtraImport": true,
        "detail": "app.utils.logger.setup",
        "documentation": {}
    },
    {
        "label": "api_router",
        "importPath": "app.routes.routes",
        "description": "app.routes.routes",
        "isExtraImport": true,
        "detail": "app.routes.routes",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "get_cors_config",
        "kind": 2,
        "importPath": "app.config.config_utils",
        "description": "app.config.config_utils",
        "peekOfCode": "def get_cors_config() -> Dict[str, Any]:\n    \"\"\"Get CORS configuration for FastAPI\"\"\"\n    return {\n        \"allow_origins\": settings.get_allow_origins_list(),\n        \"allow_credentials\": settings.allow_credentials,\n        \"allow_methods\": settings.get_allow_methods_list(),\n        \"allow_headers\": settings.get_allow_headers_list(),\n    }\ndef get_trusted_hosts() -> List[str]:\n    \"\"\"Get trusted hosts for FastAPI\"\"\"",
        "detail": "app.config.config_utils",
        "documentation": {}
    },
    {
        "label": "get_trusted_hosts",
        "kind": 2,
        "importPath": "app.config.config_utils",
        "description": "app.config.config_utils",
        "peekOfCode": "def get_trusted_hosts() -> List[str]:\n    \"\"\"Get trusted hosts for FastAPI\"\"\"\n    return settings.get_trusted_hosts_list()\ndef get_database_config() -> Dict[str, Any]:\n    \"\"\"Get database configuration\"\"\"\n    return {\n        \"url\": settings.database_url,\n        \"echo\": settings.database_echo,\n        \"pool_size\": settings.database_pool_size,\n        \"max_overflow\": settings.database_max_overflow,",
        "detail": "app.config.config_utils",
        "documentation": {}
    },
    {
        "label": "get_database_config",
        "kind": 2,
        "importPath": "app.config.config_utils",
        "description": "app.config.config_utils",
        "peekOfCode": "def get_database_config() -> Dict[str, Any]:\n    \"\"\"Get database configuration\"\"\"\n    return {\n        \"url\": settings.database_url,\n        \"echo\": settings.database_echo,\n        \"pool_size\": settings.database_pool_size,\n        \"max_overflow\": settings.database_max_overflow,\n        \"connect_args\": {\"check_same_thread\": settings.database_check_same_thread} if \"sqlite\" in settings.database_url else {}\n    }\ndef get_jwt_config() -> Dict[str, Any]:",
        "detail": "app.config.config_utils",
        "documentation": {}
    },
    {
        "label": "get_jwt_config",
        "kind": 2,
        "importPath": "app.config.config_utils",
        "description": "app.config.config_utils",
        "peekOfCode": "def get_jwt_config() -> Dict[str, Any]:\n    \"\"\"Get JWT configuration\"\"\"\n    return {\n        \"secret_key\": settings.jwt_secret_key or settings.secret_key,\n        \"algorithm\": settings.jwt_algorithm,\n        \"access_token_expire_minutes\": settings.jwt_access_token_expire_minutes,\n        \"refresh_token_expire_days\": settings.jwt_refresh_token_expire_days,\n    }\ndef get_logging_config() -> Dict[str, Any]:\n    \"\"\"Get logging configuration for Loguru\"\"\"",
        "detail": "app.config.config_utils",
        "documentation": {}
    },
    {
        "label": "get_logging_config",
        "kind": 2,
        "importPath": "app.config.config_utils",
        "description": "app.config.config_utils",
        "peekOfCode": "def get_logging_config() -> Dict[str, Any]:\n    \"\"\"Get logging configuration for Loguru\"\"\"\n    return {\n        \"level\": settings.log_level,\n        \"format\": settings.log_format,\n        \"rotation\": settings.log_rotation,\n        \"retention\": settings.log_retention,\n        \"compression\": settings.log_compression,\n        \"backtrace\": settings.log_backtrace,\n        \"colorize\": settings.log_color,",
        "detail": "app.config.config_utils",
        "documentation": {}
    },
    {
        "label": "get_server_config",
        "kind": 2,
        "importPath": "app.config.config_utils",
        "description": "app.config.config_utils",
        "peekOfCode": "def get_server_config() -> Dict[str, Any]:\n    \"\"\"Get server configuration for Uvicorn\"\"\"\n    return {\n        \"host\": settings.host,\n        \"port\": settings.port,\n        \"reload\": settings.reload and settings.debug,\n        \"debug\": settings.debug,\n        \"log_level\": settings.log_level.lower(),\n    }\ndef is_production() -> bool:",
        "detail": "app.config.config_utils",
        "documentation": {}
    },
    {
        "label": "is_production",
        "kind": 2,
        "importPath": "app.config.config_utils",
        "description": "app.config.config_utils",
        "peekOfCode": "def is_production() -> bool:\n    \"\"\"Check if running in production environment\"\"\"\n    return settings.environment.lower() == \"production\"\ndef is_development() -> bool:\n    \"\"\"Check if running in development environment\"\"\"\n    return settings.environment.lower() == \"development\"\ndef is_testing() -> bool:\n    \"\"\"Check if running in testing environment\"\"\"\n    return settings.environment.lower() == \"testing\"\n# Example usage in FastAPI main.py",
        "detail": "app.config.config_utils",
        "documentation": {}
    },
    {
        "label": "is_development",
        "kind": 2,
        "importPath": "app.config.config_utils",
        "description": "app.config.config_utils",
        "peekOfCode": "def is_development() -> bool:\n    \"\"\"Check if running in development environment\"\"\"\n    return settings.environment.lower() == \"development\"\ndef is_testing() -> bool:\n    \"\"\"Check if running in testing environment\"\"\"\n    return settings.environment.lower() == \"testing\"\n# Example usage in FastAPI main.py\ndef get_app_metadata() -> Dict[str, Any]:\n    \"\"\"Get application metadata for FastAPI\"\"\"\n    return {",
        "detail": "app.config.config_utils",
        "documentation": {}
    },
    {
        "label": "is_testing",
        "kind": 2,
        "importPath": "app.config.config_utils",
        "description": "app.config.config_utils",
        "peekOfCode": "def is_testing() -> bool:\n    \"\"\"Check if running in testing environment\"\"\"\n    return settings.environment.lower() == \"testing\"\n# Example usage in FastAPI main.py\ndef get_app_metadata() -> Dict[str, Any]:\n    \"\"\"Get application metadata for FastAPI\"\"\"\n    return {\n        \"title\": settings.app_name,\n        \"description\": settings.app_description,\n        \"version\": settings.app_version,",
        "detail": "app.config.config_utils",
        "documentation": {}
    },
    {
        "label": "get_app_metadata",
        "kind": 2,
        "importPath": "app.config.config_utils",
        "description": "app.config.config_utils",
        "peekOfCode": "def get_app_metadata() -> Dict[str, Any]:\n    \"\"\"Get application metadata for FastAPI\"\"\"\n    return {\n        \"title\": settings.app_name,\n        \"description\": settings.app_description,\n        \"version\": settings.app_version,\n        \"contact\": {\n            \"name\": settings.app_author,\n            \"url\": settings.app_contact,\n            \"email\": settings.app_contact_email,",
        "detail": "app.config.config_utils",
        "documentation": {}
    },
    {
        "label": "DatabaseManager",
        "kind": 6,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "class DatabaseManager:\n    \"\"\"Enhanced database manager with connection pooling, health checks, and error handling.\"\"\"\n    def __init__(self):\n        self._engine: Optional[Engine] = None\n        self._session_factory: Optional[sessionmaker] = None\n        self._base: Optional[Type[DeclarativeMeta]] = None\n        self._is_initialized = False\n        self._connection_retry_attempts = 3\n        self._connection_retry_delay = 1.0\n    @property",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "def get_db() -> Generator[Session, None, None]:\n    \"\"\"\n    Dependency function to get database session.\n    Used with FastAPI's Depends() for automatic session management.\n    \"\"\"\n    session = db_manager.get_session()\n    try:\n        yield session\n    except SQLAlchemyError as e:\n        session.rollback()",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "get_db_context",
        "kind": 2,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "def get_db_context():\n    \"\"\"Get database session context manager for manual session management.\"\"\"\n    return db_manager.get_session_context()\ndef init_db():\n    \"\"\"Initialize database and create tables.\"\"\"\n    try:\n        db_manager.create_tables()\n        logger.info(\"Database initialized successfully\")\n    except Exception as e:\n        logger.error(f\"Database initialization failed: {e}\")",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "init_db",
        "kind": 2,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "def init_db():\n    \"\"\"Initialize database and create tables.\"\"\"\n    try:\n        db_manager.create_tables()\n        logger.info(\"Database initialized successfully\")\n    except Exception as e:\n        logger.error(f\"Database initialization failed: {e}\")\n        raise\ndef close_db():\n    \"\"\"Close database connections.\"\"\"",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "close_db",
        "kind": 2,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "def close_db():\n    \"\"\"Close database connections.\"\"\"\n    db_manager.close()\ndef db_health_check() -> Dict[str, Any]:\n    \"\"\"Get database health status.\"\"\"\n    return db_manager.health_check()",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "db_health_check",
        "kind": 2,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "def db_health_check() -> Dict[str, Any]:\n    \"\"\"Get database health status.\"\"\"\n    return db_manager.health_check()",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass DatabaseManager:\n    \"\"\"Enhanced database manager with connection pooling, health checks, and error handling.\"\"\"\n    def __init__(self):\n        self._engine: Optional[Engine] = None\n        self._session_factory: Optional[sessionmaker] = None\n        self._base: Optional[Type[DeclarativeMeta]] = None\n        self._is_initialized = False\n        self._connection_retry_attempts = 3\n        self._connection_retry_delay = 1.0",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "db_manager",
        "kind": 5,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "db_manager = DatabaseManager()\n# Backward compatibility - expose traditional objects\nengine = db_manager.engine\nSessionLocal = db_manager.session_factory\nBase = db_manager.base\ndef get_db() -> Generator[Session, None, None]:\n    \"\"\"\n    Dependency function to get database session.\n    Used with FastAPI's Depends() for automatic session management.\n    \"\"\"",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "engine = db_manager.engine\nSessionLocal = db_manager.session_factory\nBase = db_manager.base\ndef get_db() -> Generator[Session, None, None]:\n    \"\"\"\n    Dependency function to get database session.\n    Used with FastAPI's Depends() for automatic session management.\n    \"\"\"\n    session = db_manager.get_session()\n    try:",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "SessionLocal = db_manager.session_factory\nBase = db_manager.base\ndef get_db() -> Generator[Session, None, None]:\n    \"\"\"\n    Dependency function to get database session.\n    Used with FastAPI's Depends() for automatic session management.\n    \"\"\"\n    session = db_manager.get_session()\n    try:\n        yield session",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "Base = db_manager.base\ndef get_db() -> Generator[Session, None, None]:\n    \"\"\"\n    Dependency function to get database session.\n    Used with FastAPI's Depends() for automatic session management.\n    \"\"\"\n    session = db_manager.get_session()\n    try:\n        yield session\n    except SQLAlchemyError as e:",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.config.settings",
        "description": "app.config.settings",
        "peekOfCode": "class Settings(BaseSettings):\n    \"\"\"Configuration settings for the application.\"\"\"\n    # Application Settings\n    app_name: str = Field(default=\"Auth Service\", description=\"Application name\")\n    app_description: str = Field(default=\"FastAPI Authentication and Authorization Service\", description=\"Application description\")\n    app_version: str = Field(default=\"1.0.0\", description=\"Application version\")\n    app_author: str = Field(default=\"Aditya Choudhury\", description=\"Application author\")\n    app_license: str = Field(default=\"MIT\", description=\"Application license\")\n    app_contact: str = Field(default=\"\", description=\"Contact URL\")\n    app_contact_email: str = Field(default=\"\", description=\"Contact email\")",
        "detail": "app.config.settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.config.settings",
        "description": "app.config.settings",
        "peekOfCode": "settings = Settings()",
        "detail": "app.config.settings",
        "documentation": {}
    },
    {
        "label": "UserController",
        "kind": 6,
        "importPath": "app.controllers.user_controller",
        "description": "app.controllers.user_controller",
        "peekOfCode": "class UserController:\n    \"\"\"Controller layer for handling user-related HTTP requests and responses.\"\"\"\n    def __init__(self):\n        self.user_service = user_service\n    async def create_user(self, user_data: UserCreate) -> UserResponse:\n        \"\"\"Handle user creation request.\"\"\"\n        try:\n            return self.user_service.create_user(user_data)\n        except ValueError as e:\n            logger.warning(f\"User creation validation error: {str(e)}\")",
        "detail": "app.controllers.user_controller",
        "documentation": {}
    },
    {
        "label": "user_controller",
        "kind": 5,
        "importPath": "app.controllers.user_controller",
        "description": "app.controllers.user_controller",
        "peekOfCode": "user_controller = UserController()",
        "detail": "app.controllers.user_controller",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class UserRole(str, Enum):\n    \"\"\"User roles enumeration.\"\"\"\n    ADMIN = \"admin\"\n    MODERATOR = \"moderator\"\n    USER = \"user\"\nclass User(Base):\n    \"\"\"User model for storing user account information.\"\"\"\n    __tablename__ = \"users\"\n    # Primary key\n    id = Column(Integer, primary_key=True, index=True, autoincrement=True)",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class User(Base):\n    \"\"\"User model for storing user account information.\"\"\"\n    __tablename__ = \"users\"\n    # Primary key\n    id = Column(Integer, primary_key=True, index=True, autoincrement=True)\n    # Basic user information\n    email = Column(\n        String(255), \n        unique=True, \n        index=True, ",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "kind": 6,
        "importPath": "app.repositories.base_repository",
        "description": "app.repositories.base_repository",
        "peekOfCode": "class BaseRepository(Generic[ModelType], ABC):\n    \"\"\"Base repository class with common CRUD operations.\"\"\"\n    def __init__(self, model: type[ModelType]):\n        self.model = model\n    def get_by_id(self, id: Any) -> Optional[ModelType]:\n        \"\"\"Get a single record by ID.\"\"\"\n        with get_db_context() as session:\n            return session.query(self.model).filter(getattr(self.model, \"id\") == id).first()\n    def get_all(\n        self, ",
        "detail": "app.repositories.base_repository",
        "documentation": {}
    },
    {
        "label": "ModelType",
        "kind": 5,
        "importPath": "app.repositories.base_repository",
        "description": "app.repositories.base_repository",
        "peekOfCode": "ModelType = TypeVar(\"ModelType\", bound=DeclarativeMeta)\nclass BaseRepository(Generic[ModelType], ABC):\n    \"\"\"Base repository class with common CRUD operations.\"\"\"\n    def __init__(self, model: type[ModelType]):\n        self.model = model\n    def get_by_id(self, id: Any) -> Optional[ModelType]:\n        \"\"\"Get a single record by ID.\"\"\"\n        with get_db_context() as session:\n            return session.query(self.model).filter(getattr(self.model, \"id\") == id).first()\n    def get_all(",
        "detail": "app.repositories.base_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "kind": 6,
        "importPath": "app.repositories.user_repository",
        "description": "app.repositories.user_repository",
        "peekOfCode": "class UserRepository(BaseRepository[User]):\n    \"\"\"Repository for User model with specific user-related database operations.\"\"\"\n    def __init__(self):\n        super().__init__(User)\n    def get_by_email(self, email: str) -> Optional[User]:\n        \"\"\"Get user by email address.\"\"\"\n        return self.get_by_field(\"email\", email)\n    def get_by_username(self, username: str) -> Optional[User]:\n        \"\"\"Get user by username.\"\"\"\n        return self.get_by_field(\"username\", username)",
        "detail": "app.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "user_repository",
        "kind": 5,
        "importPath": "app.repositories.user_repository",
        "description": "app.repositories.user_repository",
        "peekOfCode": "user_repository = UserRepository()",
        "detail": "app.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "kind": 5,
        "importPath": "app.routes.authRouter",
        "description": "app.routes.authRouter",
        "peekOfCode": "auth_router = APIRouter(\n    prefix=\"/auth\", \n    tags=[\"auth\"]\n)\n@auth_router.post(\"/\",\n    response_model=UserResponse,\n    status_code=status.HTTP_201_CREATED,\n    summary=\"Create a new user\",\n    description=\"Create a new user account with the provided information.\")\nasync def create_user(user_data: UserCreate):",
        "detail": "app.routes.authRouter",
        "documentation": {}
    },
    {
        "label": "api_router",
        "kind": 5,
        "importPath": "app.routes.routes",
        "description": "app.routes.routes",
        "peekOfCode": "api_router = APIRouter()\napi_router.include_router(auth_router, prefix=\"/v1\", tags=[\"auth\"])",
        "detail": "app.routes.routes",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "app.schemas.users",
        "description": "app.schemas.users",
        "peekOfCode": "class UserRole(str, Enum):\n    ADMIN = \"admin\",\n    MODERATOR = \"moderator\",\n    USER = \"user\"\nclass Gender(str, Enum):\n    MALE = \"male\",\n    FEMALE = \"female\",\n    OTHER = \"other\",\n    PREFER_NOT_TO_SAY = \"prefer_not_to_say\"\nclass UserStatus(str, Enum):",
        "detail": "app.schemas.users",
        "documentation": {}
    },
    {
        "label": "Gender",
        "kind": 6,
        "importPath": "app.schemas.users",
        "description": "app.schemas.users",
        "peekOfCode": "class Gender(str, Enum):\n    MALE = \"male\",\n    FEMALE = \"female\",\n    OTHER = \"other\",\n    PREFER_NOT_TO_SAY = \"prefer_not_to_say\"\nclass UserStatus(str, Enum):\n    ACTIVE = \"active\",\n    INACTIVE = \"inactive\",\n    SUSPENDED = \"suspended\",\n    PENDING_VERIFICATION = \"pending_verification\"",
        "detail": "app.schemas.users",
        "documentation": {}
    },
    {
        "label": "UserStatus",
        "kind": 6,
        "importPath": "app.schemas.users",
        "description": "app.schemas.users",
        "peekOfCode": "class UserStatus(str, Enum):\n    ACTIVE = \"active\",\n    INACTIVE = \"inactive\",\n    SUSPENDED = \"suspended\",\n    PENDING_VERIFICATION = \"pending_verification\"\nclass UserBase(BaseModel):\n    user_id: Optional[str] = Field(\n        None,\n        description=\"Unique identifier for a user\"\n    )",
        "detail": "app.schemas.users",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "app.schemas.users",
        "description": "app.schemas.users",
        "peekOfCode": "class UserBase(BaseModel):\n    user_id: Optional[str] = Field(\n        None,\n        description=\"Unique identifier for a user\"\n    )\n    email: EmailStr = Field(\n        ..., \n        description=\"User's email address\"\n    )\n    username: Optional[str] = Field(",
        "detail": "app.schemas.users",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas.users",
        "description": "app.schemas.users",
        "peekOfCode": "class UserCreate(UserBase):\n    role: UserRole = Field(\n        default=UserRole.USER,\n        description=\"Role of the user\"\n    )\nclass UserLogin(BaseModel):\n    email: Optional[EmailStr] = Field(\n        None,\n        description=\"Email address of the user\"\n    )",
        "detail": "app.schemas.users",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "app.schemas.users",
        "description": "app.schemas.users",
        "peekOfCode": "class UserLogin(BaseModel):\n    email: Optional[EmailStr] = Field(\n        None,\n        description=\"Email address of the user\"\n    )\n    username: Optional[str] = Field(\n        None,\n        min_length=3,\n        max_length=50,\n        description=\"Username (alphanumeric and underscore only)\",",
        "detail": "app.schemas.users",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "app.schemas.users",
        "description": "app.schemas.users",
        "peekOfCode": "class UserResponse(BaseModel):\n    user_id: str = Field(\n        ...,\n        description=\"Unique identifier for a user\"\n    )\n    email: EmailStr = Field(\n        ...,\n        description=\"User's email address\"\n    )\n    username: str = Field(",
        "detail": "app.schemas.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class UserRole(str, Enum):\n    \"\"\"User roles enumeration.\"\"\"\n    ADMIN = \"admin\"\n    MODERATOR = \"moderator\"\n    USER = \"user\"\n# Base schema with common fields\nclass UserBase(BaseModel):\n    \"\"\"Base user schema with common fields.\"\"\"\n    email: EmailStr = Field(..., description=\"User's email address\")\n    username: Optional[str] = Field(",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class UserBase(BaseModel):\n    \"\"\"Base user schema with common fields.\"\"\"\n    email: EmailStr = Field(..., description=\"User's email address\")\n    username: Optional[str] = Field(\n        None,\n        min_length=3,\n        max_length=50,\n        pattern=\"^[a-zA-Z0-9_]+$\",\n        description=\"Username (alphanumeric and underscore only)\",\n    )",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class UserCreate(UserBase):\n    \"\"\"Schema for creating a new user.\"\"\"\n    password: str = Field(\n        ..., min_length=8, max_length=128, description=\"Password (minimum 8 characters)\"\n    )\n    role: UserRole = Field(default=UserRole.USER, description=\"User role\")\n    @validator(\"password\")\n    def validate_password(cls, v):\n        \"\"\"Validate password strength.\"\"\"\n        return UserValidators.validate_password(v, require_special_char=True)",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class UserUpdate(BaseModel):\n    \"\"\"Schema for updating user information.\"\"\"\n    email: Optional[EmailStr] = Field(None, description=\"New email address\")\n    username: Optional[str] = Field(\n        None,\n        min_length=3,\n        max_length=50,\n        pattern=\"^[a-zA-Z0-9_]+$\",\n        description=\"New username\",\n    )",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class UserLogin(BaseModel):\n    \"\"\"Schema for user authentication.\"\"\"\n    email: EmailStr = Field(..., description=\"User's email address\")\n    password: str = Field(..., min_length=1, description=\"User's password\")\n    @validator(\"email\")\n    def validate_email(cls, v):\n        \"\"\"Validate email format.\"\"\"\n        return UserValidators.validate_email(v)\n# Schema for user response (what gets returned to the client)\nclass UserResponse(BaseModel):",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class UserResponse(BaseModel):\n    \"\"\"Schema for user response data.\"\"\"\n    id: int = Field(..., description=\"User ID\")\n    email: str = Field(..., description=\"User's email address\")\n    username: Optional[str] = Field(None, description=\"Username\")\n    first_name: str = Field(..., description=\"First name\")\n    last_name: str = Field(..., description=\"Last name\")\n    full_name: Optional[str] = Field(None, description=\"Full name\")\n    phone_number: Optional[str] = Field(None, description=\"Phone number\")\n    bio: Optional[str] = Field(None, description=\"User biography\")",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserSummary",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class UserSummary(BaseModel):\n    \"\"\"Schema for minimal user information.\"\"\"\n    id: int = Field(..., description=\"User ID\")\n    email: str = Field(..., description=\"User's email address\")\n    username: Optional[str] = Field(None, description=\"Username\")\n    full_name: str = Field(..., description=\"Full name\")\n    role: UserRole = Field(..., description=\"User role\")\n    is_active: bool = Field(..., description=\"Whether the account is active\")\n    class Config:\n        \"\"\"Pydantic configuration.\"\"\"",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "PasswordResetRequest",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class PasswordResetRequest(BaseModel):\n    \"\"\"Schema for password reset request.\"\"\"\n    email: EmailStr = Field(..., description=\"User's email address\")\n    @validator(\"email\")\n    def validate_email(cls, v):\n        \"\"\"Validate email format.\"\"\"\n        return UserValidators.validate_email(v)\n# Schema for password reset confirmation\nclass PasswordResetConfirm(BaseModel):\n    \"\"\"Schema for password reset confirmation.\"\"\"",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "PasswordResetConfirm",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class PasswordResetConfirm(BaseModel):\n    \"\"\"Schema for password reset confirmation.\"\"\"\n    token: str = Field(..., description=\"Reset token\")\n    new_password: str = Field(\n        ..., min_length=8, max_length=128, description=\"New password\"\n    )\n    @validator(\"new_password\")\n    def validate_password(cls, v):\n        \"\"\"Validate password strength.\"\"\"\n        return UserValidators.validate_password(v, require_special_char=False)",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserValidators",
        "kind": 6,
        "importPath": "app.schemas.validators",
        "description": "app.schemas.validators",
        "peekOfCode": "class UserValidators:\n    @staticmethod\n    def validate_email(email: Optional[str]) -> Optional[str]:\n        if email is None:\n            return email\n        return email.lower().strip()\n    @staticmethod\n    def validate_name(name: Optional[str]) -> Optional[str]:\n        if name is None:\n            return name",
        "detail": "app.schemas.validators",
        "documentation": {}
    },
    {
        "label": "UserService",
        "kind": 6,
        "importPath": "app.services.UserService",
        "description": "app.services.UserService",
        "peekOfCode": "class UserService:    \n    def __init__(self):\n        self.user_repo = user_repository\n    def _hash_password(self, password: str) -> str:\n        return pwd_context.hash(password)\n    def _verify_password(self, plain_password: str, hashed_password: str) -> bool:\n        return pwd_context.verify(plain_password, hashed_password)\n    def create_user(self, user_data: UserCreate) -> UserResponse:\n        try:\n            # Check if user already exists",
        "detail": "app.services.UserService",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.services.UserService",
        "description": "app.services.UserService",
        "peekOfCode": "logger = logging.getLogger(__name__)\npwd_context = CryptContext(schemes=[\"bcrypt\"])\nclass UserService:    \n    def __init__(self):\n        self.user_repo = user_repository\n    def _hash_password(self, password: str) -> str:\n        return pwd_context.hash(password)\n    def _verify_password(self, plain_password: str, hashed_password: str) -> bool:\n        return pwd_context.verify(plain_password, hashed_password)\n    def create_user(self, user_data: UserCreate) -> UserResponse:",
        "detail": "app.services.UserService",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.services.UserService",
        "description": "app.services.UserService",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"])\nclass UserService:    \n    def __init__(self):\n        self.user_repo = user_repository\n    def _hash_password(self, password: str) -> str:\n        return pwd_context.hash(password)\n    def _verify_password(self, plain_password: str, hashed_password: str) -> bool:\n        return pwd_context.verify(plain_password, hashed_password)\n    def create_user(self, user_data: UserCreate) -> UserResponse:\n        try:",
        "detail": "app.services.UserService",
        "documentation": {}
    },
    {
        "label": "user_service",
        "kind": 5,
        "importPath": "app.services.UserService",
        "description": "app.services.UserService",
        "peekOfCode": "user_service = UserService()",
        "detail": "app.services.UserService",
        "documentation": {}
    },
    {
        "label": "CustomFormatter",
        "kind": 6,
        "importPath": "app.utils.logger.logger_config",
        "description": "app.utils.logger.logger_config",
        "peekOfCode": "class CustomFormatter:\n    \"\"\"Custom formatter for structured logging\"\"\"\n    def __init__(self, settings, include_extra: bool = True):\n        self.settings = settings\n        self.include_extra = include_extra\n    def format(self, record)->str:\n        \"\"\"Format log record with additional context\"\"\"\n        # Get context variables\n        request_id = request_id_var.get()\n        user_id = user_id_var.get()",
        "detail": "app.utils.logger.logger_config",
        "documentation": {}
    },
    {
        "label": "LoggerConfig",
        "kind": 6,
        "importPath": "app.utils.logger.logger_config",
        "description": "app.utils.logger.logger_config",
        "peekOfCode": "class LoggerConfig:\n    \"\"\"Production-grade logger configuration\"\"\"\n    def __init__(self, settings):\n        self.settings = settings\n        self._setup_logger()\n    def _setup_logger(self):\n        \"\"\"Setup loguru logger with production configurations\"\"\"\n        # Remove default logger\n        logger.remove()\n        # Setup console logging",
        "detail": "app.utils.logger.logger_config",
        "documentation": {}
    },
    {
        "label": "LoggerUtils",
        "kind": 6,
        "importPath": "app.utils.logger.logger_config",
        "description": "app.utils.logger.logger_config",
        "peekOfCode": "class LoggerUtils:\n    \"\"\"Utility functions for logging\"\"\"\n    @staticmethod\n    def set_request_context(request_id: str, user_id: Optional[str] = None):\n        \"\"\"Set request context for logging\"\"\"\n        request_id_var.set(request_id)\n        if user_id:\n            user_id_var.set(user_id)\n    @staticmethod\n    def clear_request_context():",
        "detail": "app.utils.logger.logger_config",
        "documentation": {}
    },
    {
        "label": "LoggingMiddleware",
        "kind": 6,
        "importPath": "app.utils.logger.middleware",
        "description": "app.utils.logger.middleware",
        "peekOfCode": "class LoggingMiddleware(BaseHTTPMiddleware):\n    \"\"\"Middleware for comprehensive request/response logging\"\"\"\n    def __init__(self, app, settings):\n        super().__init__(app)\n        self.settings = settings\n        self.excluded_paths = [\"/health\", \"/metrics\", \"/favicon.ico\"]\n        self.sensitive_headers = [\"authorization\", \"cookie\", \"x-api-key\"]\n    async def dispatch(self, request: Request, call_next):\n        # Skip logging for excluded paths\n        if request.url.path in self.excluded_paths:",
        "detail": "app.utils.logger.middleware",
        "documentation": {}
    },
    {
        "label": "PerformanceMiddleware",
        "kind": 6,
        "importPath": "app.utils.logger.middleware",
        "description": "app.utils.logger.middleware",
        "peekOfCode": "class PerformanceMiddleware(BaseHTTPMiddleware):\n    \"\"\"Middleware for performance monitoring\"\"\"\n    def __init__(self, app, settings):\n        super().__init__(app)\n        self.settings = settings\n        self.slow_threshold = 1.0  # seconds\n        self.very_slow_threshold = 5.0  # seconds\n    async def dispatch(self, request: Request, call_next: Callable) -> Response:\n        start_time = time.time()\n        response = await call_next(request)",
        "detail": "app.utils.logger.middleware",
        "documentation": {}
    },
    {
        "label": "LogPerformance",
        "kind": 6,
        "importPath": "app.utils.logger.setup",
        "description": "app.utils.logger.setup",
        "peekOfCode": "class LogPerformance:\n    \"\"\"Context manager for logging operation performance\"\"\"\n    def __init__(self, operation: str, **kwargs):\n        self.operation = operation\n        self.kwargs = kwargs\n        self.start_time = None\n    def __enter__(self):\n        self.start_time = time.time()\n        logger.debug(f\"Starting operation: {self.operation}\")\n        return self",
        "detail": "app.utils.logger.setup",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "app.utils.logger.setup",
        "description": "app.utils.logger.setup",
        "peekOfCode": "def setup_logging(settings):\n    \"\"\"Setup production logging configuration\"\"\"\n    # Initialize logger configuration\n    logger_config = LoggerConfig(settings)\n    # Log startup\n    logger.info(\n        f\"Application starting: {settings.app_name}\",\n        extra={\n            \"startup\": True,\n            \"app_name\": settings.app_name,",
        "detail": "app.utils.logger.setup",
        "documentation": {}
    },
    {
        "label": "add_logging_middleware",
        "kind": 2,
        "importPath": "app.utils.logger.setup",
        "description": "app.utils.logger.setup",
        "peekOfCode": "def add_logging_middleware(app, settings):\n    \"\"\"Add logging middleware to FastAPI app\"\"\"\n    app.add_middleware(LoggingMiddleware, settings=settings)\n    app.add_middleware(PerformanceMiddleware, settings=settings)\n# Context manager for performance logging\nclass LogPerformance:\n    \"\"\"Context manager for logging operation performance\"\"\"\n    def __init__(self, operation: str, **kwargs):\n        self.operation = operation\n        self.kwargs = kwargs",
        "detail": "app.utils.logger.setup",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def create_app() -> FastAPI:\n    \"\"\"\n    Create and configure the FastAPI application.\n    \"\"\"\n    app: FastAPI = FastAPI(\n        title=Settings.app_name,\n        description=Settings.app_description,\n        version=Settings.app_version,\n        openapi_url=\"/api/v1/openapi.json\",\n        docs_url=\"/api/docs\",",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = create_app()",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "__all__ = [\"app\"]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "test_configuration",
        "kind": 2,
        "importPath": "test_config",
        "description": "test_config",
        "peekOfCode": "def test_configuration():\n    \"\"\"Test the configuration settings\"\"\"\n    try:\n        from app.config.settings import settings\n        print(\"🔧 Configuration Test Results\")\n        print(\"=\" * 50)\n        # Application Settings\n        print(f\"📱 App Name: {settings.app_name}\")\n        print(f\"📝 App Description: {settings.app_description}\")\n        print(f\"🏷️  App Version: {settings.app_version}\")",
        "detail": "test_config",
        "documentation": {}
    },
    {
        "label": "check_env_file",
        "kind": 2,
        "importPath": "test_config",
        "description": "test_config",
        "peekOfCode": "def check_env_file():\n    \"\"\"Check if .env file exists and has required variables\"\"\"\n    env_path = Path(\".env\")\n    if not env_path.exists():\n        print(\"⚠️  .env file not found - using default values\")\n        return False\n    print(\"✅ .env file found\")\n    required_vars = [\n        \"SECRET_KEY\",\n        \"DATABASE_URL\",",
        "detail": "test_config",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": "test_config",
        "description": "test_config",
        "peekOfCode": "project_root = Path(__file__).parent\nsys.path.insert(0, str(project_root))\ndef test_configuration():\n    \"\"\"Test the configuration settings\"\"\"\n    try:\n        from app.config.settings import settings\n        print(\"🔧 Configuration Test Results\")\n        print(\"=\" * 50)\n        # Application Settings\n        print(f\"📱 App Name: {settings.app_name}\")",
        "detail": "test_config",
        "documentation": {}
    }
]